@inherits UmbracoViewPage<MapViewModel>
@using Umbraco.Web.PropertyValueConverters.Leaflet
@using Newtonsoft.Json;

@{
    //Remember to get a new Google Map API key on isupport account developers.google.com/maps/documentation/javascript/get-api-key
    // Sample developers.google.com/maps/documentation/javascript/examples/maptype-styled-simple
    Html.RequiresJs("https://maps.googleapis.com/maps/api/js?key=AIzaSyCSgmMsbKTF_nfT7zM6lvWm81GlrcSgIFI ", 1, 2, new { @defer = string.Empty });
    Html.RequiresJs("~/Content/components/js-marker-clusterer/src/markerclusterer.js", 2, 2, new { @defer = string.Empty });
    Html.RequiresJs("~/scripts/build/google-map.js", 2, 2, new { @defer = string.Empty });

    var mapList = Model.MapList;
    var map = Model.MapLocation;

    if (mapList != null && mapList.Any())
    {
        switch (Model.MapListRenderType)
        {
            case MapListRenderType.NestedContent:
                @renderMapListNestedContent(mapList) break;
            default:
                @renderMapList(mapList) break;
        }

    }
    else if (map != null && (map.LatLng.Lng != 0 || map.LatLng.Lat != 0))
    {
        @renderMap(map)
    }
}

@helper renderMap(LeafletMapModel map)
{
var zoom = map.Zoom;

var marker = new MapMarker
{
    Lat = map.LatLng.Lat,
    Lng = map.LatLng.Lng
};

var markerAsJson = JsonConvert.SerializeObject(
    marker.AsEnumerableOfOne(),
    new JsonSerializerSettings
    {
        NullValueHandling = NullValueHandling.Ignore
    });

    <div class="google-map @(Model.ClassModifiers)"
         data-zoom="@zoom"
         data-markers="@markerAsJson">
        <div class="google-map__canvas" style="height: @(Model.CanvasHeight + "px")">
            Google Map...
        </div>
    </div>
}

@helper renderMapList(IEnumerable<IPublishedContent> mapList)
{
Model.Zoom = Model.Zoom == 0 ? 7 : Model.Zoom;
var markers = from marker in mapList
              where marker.LeafletMapHasValues("mapLocation")
              group marker by new
              {
                  marker.GetPropertyValue<LeafletMapModel>("mapLocation").LatLng.Lat,
                  marker.GetPropertyValue<LeafletMapModel>("mapLocation").LatLng.Lng
              } into groupedMarkers
              select new MapMarker
              {
                  Lat = groupedMarkers.Key.Lat,
                  Lng = groupedMarkers.Key.Lng,
                  ContentList = from groupedMark in groupedMarkers
                                select new MapMarkerContent
                                {
                                    Heading = groupedMark.GetPropertyValue<string>("heading", groupedMark.Name),
                                    Url = groupedMark.Url
                                }
              };

var markersAsJson = JsonConvert.SerializeObject(
    markers,
    new JsonSerializerSettings
    {
        NullValueHandling = NullValueHandling.Ignore
    });

        <div class="google-map @(Model.ClassModifiers)"
             data-zoom="@Model.Zoom"
             data-markers="@markersAsJson">
            <div class="google-map__canvas" style="height: @(Model.CanvasHeight + "px")">
                Google Map...
            </div>
        </div>
}

@helper renderMapListNestedContent(IEnumerable<IPublishedContent> mapListNestedContent)
{

var markers = from page in mapListNestedContent
              where page.HasValue("mapLocations")
              from marker in page.GetPropertyValue<IEnumerable<IPublishedContent>>("mapLocations")
              where marker.LeafletMapHasValues("mapLocation")
              select new MapMarker
              {
                  Lat = marker.GetPropertyValue<LeafletMapModel>("mapLocation").LatLng.Lat,
                  Lng = marker.GetPropertyValue<LeafletMapModel>("mapLocation").LatLng.Lng,
                  Content = new MapMarkerContent
                  {
                      Heading = page.GetPropertyValue<string>("heading", page.Name),
                      Url = page.Url
                  }
              };

var distinctMarkers = from marker in markers
                      group marker by new
                      {
                          marker.Lat,
                          marker.Lng
                      } into groupedMarkers
                      select new MapMarker
                      {
                          Lat = groupedMarkers.Key.Lat,
                          Lng = groupedMarkers.Key.Lng,
                          ContentList = from item in groupedMarkers
                                        select new MapMarkerContent
                                        {
                                            Heading = item.Content.Heading,
                                            Url = item.Content.Url
                                        }
                      };

var markersAsJson = JsonConvert.SerializeObject(
distinctMarkers,
new JsonSerializerSettings
{
    NullValueHandling = NullValueHandling.Ignore
});

        <div class="google-map @(Model.ClassModifiers)"
             data-zoom="@Model.Zoom"
             data-markers="@markersAsJson">
            <div class="google-map__canvas" style="height: @(Model.CanvasHeight + "px")">
                Google Map...
            </div>
        </div>
}