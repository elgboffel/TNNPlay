@inherits UmbracoViewPage<SpotViewModel>
@using TNNPlay.Web.Helpers
@{
    var guid = Guid.NewGuid();
    var hasCallToAction = Model.CallToAction != null && Model.CallToAction.Any();
    var contentLayout = Model.SpotSettings.ContentLayout;
    var contentLayoutColumn = contentLayout == UtilityEnums.ContentLayout.ContentLeft ? "col-xs-12 col-sm-5 col-sm-offset-1 col-md-4 col-md-offset-2" : "col-xs-12 col-sm-5 col-sm-offset-5 col-xs-12 col-md-4 col-md-offset-6";
    var renderContentLayoutColumn = contentLayout != UtilityEnums.ContentLayout.Default;
    if (Model.SpotSettings.EnableHeroLayout)
    {
        contentLayoutColumn = contentLayout == UtilityEnums.ContentLayout.ContentLeft ? "col-xs-12 col-sm-6 col-sm-offset-1" : "col-xs-12 col-sm-6 col-sm-offset-5";
    }
    if (hasCallToAction)
    {
        Html.RequiresJs("~/scripts/build/modal.js", 1, 2, new { @defer = string.Empty });
    }
}

<div class="spot @(Model.ClassModifier) @Umbraco.If(Model.SpotSettings.EnableHeroLayout, "spot--hero-fluid") @("spot--" + contentLayout.GetEnumDisplayName())">
    @if(!string.IsNullOrEmpty(Model.Url))
    {
        @:<a href="@Model.Url">
    }

    @if (Model.Image != null || Model.EnableImageFallback || Model.MediaType != RenderMediaTypes.Image)
    {
        <div class="spot__media @Umbraco.If(Model.SpotSettings.EnableOverlay, "overlay-dark")">
            @Html.Partial(
           "Components/_Media",
           new MediaViewModel
           {
               Image = Model.Image,
               EmbedVideo = Model.EmbedVideo,
               EmbedVideoUrl = Model.EmbedVideoUrl,
               TypedWidths = Model.TypedWidths,
               GridSettings = Model.GridSettings,
               MediaHeights = Model.MediaHeights,
               EnableImageFallback = Model.EnableImageFallback,
               MediaType = Model.MediaType
           })
        </div>
    }

    @if(!string.IsNullOrEmpty(Model.Heading) || Model.Content != null)
    {
        if (renderContentLayoutColumn)
        {
            @:<div class="container"><div class="row"><div class="@contentLayoutColumn">
        }
        <div class="spot__content">
                @if (!string.IsNullOrEmpty(Model.Trumpet))
                {
                    <div class="spot__trumpet">@Model.Trumpet</div>
                }
                @if(!string.IsNullOrEmpty(Model.Heading))
                {
                    if (!Model.SpotSettings.EnableHeroLayout)
                    {
                        @:<h2 class="spot__heading">
                    } else
                    {
                         @:<h1 class="spot__heading">
                    }
                    @Html.Raw(Model.Heading)
                    if (!Model.SpotSettings.EnableHeroLayout)
                    {
                        @:</h2>
                    } else
                    {
                         @:</h1>
                    }
                }
                @if (Model.Content != null)
                {
                    <p class="spot__content">@Html.Raw(Model.Content)</p>
                }
                @if (hasCallToAction)
                {
                    <div class="spot__call-to-action">
                        <div class="btn btn--default btn--arrow modal--btn" role="button" data-target="modal-@guid" >Register here</div>
                    </div>
                }
                <div class="spot__spacer"></div>
        </div>
        if (renderContentLayoutColumn)
        {
            @:</div></div></div>
        }
}

    @if(!string.IsNullOrEmpty(Model.Url))
    {
        @:</a>
    }
</div>
@if (hasCallToAction)
{
    { Html.RenderPartial(
        "Components/_Modal",
        new ModalViewModel
        {
            Id = guid,
            Modal = Model.CallToAction
        }); }
}


